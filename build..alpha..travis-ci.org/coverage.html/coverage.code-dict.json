{"/home/travis/build/npmtest/node-npmtest-mem-fs-editor/test.js":"/* istanbul instrument in package npmtest_mem_fs_editor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/lib.npmtest_mem_fs_editor.js":"/* istanbul instrument in package npmtest_mem_fs_editor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mem_fs_editor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mem_fs_editor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mem-fs-editor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mem_fs_editor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mem_fs_editor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mem_fs_editor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mem_fs_editor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mem_fs_editor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mem_fs_editor.__dirname + '/lib.npmtest_mem_fs_editor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/index.js":"'use strict';\n\nfunction EditionInterface(store) {\n  this.store = store;\n}\n\nEditionInterface.prototype.read = require('./actions/read.js');\nEditionInterface.prototype.readJSON = require('./actions/read-json.js');\nEditionInterface.prototype.exists = require('./actions/exists');\nEditionInterface.prototype.write = require('./actions/write.js');\nEditionInterface.prototype.writeJSON = require('./actions/write-json.js');\nEditionInterface.prototype.extendJSON = require('./actions/extend-json.js');\nEditionInterface.prototype.append = require('./actions/append.js');\nEditionInterface.prototype.delete = require('./actions/delete.js');\nEditionInterface.prototype.copy = require('./actions/copy.js').copy;\nEditionInterface.prototype._copySingle = require('./actions/copy.js')._copySingle;\nEditionInterface.prototype.copyTpl = require('./actions/copy-tpl.js');\nEditionInterface.prototype.move = require('./actions/move.js');\nEditionInterface.prototype.commit = require('./actions/commit.js');\n\nexports.create = function (store) {\n  return new EditionInterface(store);\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/read.js":"'use strict';\n\nmodule.exports = function (filepath, options) {\n  options = options || {raw: false};\n  var file = this.store.get(filepath);\n\n  if (file.state === 'deleted' || file.contents === null) {\n    if ('defaults' in options) {\n      return options.defaults;\n    }\n\n    throw new Error(filepath + ' doesn\\'t exist');\n  }\n\n  return options.raw ? file.contents : file.contents.toString();\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/read-json.js":"'use strict';\n\nmodule.exports = function (filepath, defaults) {\n  if (this.exists(filepath)) {\n    try {\n      return JSON.parse(this.read(filepath));\n    } catch (error) {\n      throw new Error('Could not parse JSON in file: ' + filepath + '. Detail: ' + error.message);\n    }\n  } else {\n    return defaults;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/exists.js":"'use strict';\n\nmodule.exports = function (filepath) {\n  var file = this.store.get(filepath);\n\n  return file.contents !== null && file.state !== 'deleted';\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/write.js":"'use strict';\n\nvar assert = require('assert');\n\nmodule.exports = function (filepath, contents, stat) {\n  assert(\n    typeof contents === 'string' || contents instanceof Buffer,\n    'Expected `contents` to be a String or a Buffer'\n  );\n\n  var file = this.store.get(filepath);\n  file.isNew = file.contents === null;\n  file.state = 'modified';\n  file.contents = typeof contents === 'string' ? new Buffer(contents) : contents;\n  file.stat = stat;\n  this.store.add(file);\n\n  return file.contents.toString();\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/write-json.js":"'use strict';\n\nvar DEFAULT_INDENTATION = 2;\n\nmodule.exports = function (filepath, contents, replacer, space) {\n  var jsonStr = JSON.stringify(contents, replacer || null, space || DEFAULT_INDENTATION) + '\\n';\n\n  return this.write(filepath, jsonStr);\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/extend-json.js":"'use strict';\n\nvar extend = require('deep-extend');\n\nmodule.exports = function (filepath, contents, replacer, space) {\n  var originalContent = this.readJSON(filepath, {});\n  var newContent = extend({}, originalContent, contents);\n\n  this.writeJSON(filepath, newContent, replacer, space);\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/append.js":"'use strict';\n\nvar extend = require('deep-extend');\nvar EOL = require('os').EOL;\n\nmodule.exports = function (to, contents, options) {\n  options = extend({\n    trimEnd: true,\n    separator: EOL\n  }, options || {});\n\n  var currentContents = this.read(to);\n  if (options.trimEnd) {\n    currentContents = currentContents.replace(/\\s+$/, '');\n  }\n\n  this.write(to, currentContents + options.separator + contents);\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/delete.js":"'use strict';\n\nvar path = require('path');\nvar globby = require('globby');\nvar multimatch = require('multimatch');\nvar util = require('../util');\n\nfunction deleteFile(path, store) {\n  var file = store.get(path);\n  file.state = 'deleted';\n  file.contents = null;\n  store.add(file);\n}\n\nmodule.exports = function (paths, options) {\n  if (!Array.isArray(paths)) {\n    paths = [paths];\n  }\n  paths = paths.map(function (filePath) {\n    return path.resolve(filePath);\n  });\n  paths = util.globify(paths);\n  options = options || {};\n\n  var globOptions = options.globOptions || {};\n  var files = globby.sync(paths, globOptions);\n  files.forEach(function (file) {\n    deleteFile(file, this.store);\n  }.bind(this));\n\n  this.store.each(function (file) {\n    if (multimatch([file.path], paths).length !== 0) {\n      deleteFile(file.path, this.store);\n    }\n  }.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/util.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar commondir = require('commondir');\nvar glob = require('glob');\n\nfunction notNullOrExclusion(file) {\n  return file != null && file.charAt(0) !== '!';\n}\n\nexports.getCommonPath = function (filePath) {\n  if (Array.isArray(filePath)) {\n    filePath = filePath\n      .filter(notNullOrExclusion)\n      .map(this.getCommonPath.bind(this));\n\n    return commondir(filePath);\n  }\n\n  var globStartIndex = filePath.indexOf('*');\n  if (globStartIndex !== -1) {\n    filePath = filePath.substring(0, globStartIndex + 1);\n  } else if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n    return filePath;\n  }\n\n  return path.dirname(filePath);\n};\n\nexports.globify = function (filePath) {\n  if (Array.isArray(filePath)) {\n    return filePath.reduce((memo, pattern) => memo.concat(this.globify(pattern)), []);\n  }\n\n  if (glob.hasMagic(filePath)) {\n    return filePath;\n  } else if (!fs.existsSync(filePath)) {\n    // The target of a pattern who's not a glob and doesn't match an existing\n    // entity on the disk is ambiguous. As such, match both files and directories.\n    return [\n      filePath,\n      path.join(filePath, '**')\n    ];\n  }\n\n  var fsStats = fs.statSync(filePath);\n  if (fsStats.isFile()) {\n    return filePath;\n  } else if (fsStats.isDirectory()) {\n    return path.join(filePath, '**');\n  }\n  throw new Error('Only file path or directory path are supported.');\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/copy.js":"'use strict';\n\nvar assert = require('assert');\nvar fs = require('fs');\nvar path = require('path');\nvar glob = require('glob');\nvar globby = require('globby');\nvar extend = require('deep-extend');\nvar multimatch = require('multimatch');\nvar util = require('../util');\n\nfunction applyProcessingFunc(process, contents, filename) {\n  var output = process(contents, filename);\n  return output instanceof Buffer ? output : new Buffer(output);\n}\n\nexports.copy = function (from, to, options) {\n  to = path.resolve(to);\n  options = options || {};\n  var fromGlob = util.globify(from);\n\n  var globOptions = extend(options.globOptions || {}, {nodir: true});\n  var diskFiles = globby.sync(fromGlob, globOptions);\n  var storeFiles = [];\n  this.store.each(file => {\n    if (multimatch([file.path], fromGlob).length !== 0) {\n      storeFiles.push(file.path);\n    }\n  });\n  var files = diskFiles.concat(storeFiles);\n\n  var generateDestination = () => to;\n  if (Array.isArray(from) || !this.exists(from) || glob.hasMagic(from)) {\n    assert(\n      !this.exists(to) || fs.statSync(to).isDirectory(),\n      'When copying multiple files, provide a directory as destination'\n    );\n\n    var root = util.getCommonPath(from);\n    generateDestination = filepath => {\n      var toFile = path.relative(root, filepath);\n      return path.join(to, toFile);\n    };\n  }\n\n  // Sanity checks: Makes sure we copy at least one file.\n  assert(files.length > 0, 'Trying to copy from a source that does not exist: ' + from);\n\n  files.forEach(file => {\n    this._copySingle(file, generateDestination(file), options);\n  });\n};\n\nexports._copySingle = function (from, to, options) {\n  options = options || {};\n\n  assert(this.exists(from), 'Trying to copy from a source that does not exist: ' + from);\n\n  var file = this.store.get(from);\n\n  var contents = file.contents;\n  if (options.process) {\n    contents = applyProcessingFunc(options.process, file.contents, file.path);\n  }\n\n  this.write(to, contents, file.stat);\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/copy-tpl.js":"'use strict';\n\nvar path = require('path');\nvar extend = require('deep-extend');\nvar ejs = require('ejs');\n\nmodule.exports = function (from, to, context, tplSettings, options) {\n  context = context || {};\n\n  this.copy(from, to, extend(options || {}, {\n    process: function (contents, filename) {\n      return ejs.render(\n        contents.toString(),\n        context,\n        // Setting filename by default allow including partials.\n        extend({filename: filename}, tplSettings || {})\n      );\n    }\n  }));\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/move.js":"'use strict';\n\nmodule.exports = function (from, to, options) {\n  this.copy(from, to, options);\n  this.delete(from, options);\n};\n","/home/travis/build/npmtest/node-npmtest-mem-fs-editor/node_modules/mem-fs-editor/lib/actions/commit.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar through = require('through2');\nvar mkdirp = require('mkdirp');\nvar rimraf = require('rimraf');\n\nfunction write(file) {\n  var dir = path.dirname(file.path);\n  if (!fs.existsSync(dir)) {\n    mkdirp.sync(dir);\n  }\n  fs.writeFileSync(file.path, file.contents, {\n    mode: file.stat ? file.stat.mode : null\n  });\n}\n\nfunction remove(file) {\n  rimraf.sync(file.path);\n}\n\nmodule.exports = function (filters, cb) {\n  var store = this.store;\n\n  if (arguments.length === 1) {\n    cb = filters;\n    filters = [];\n  }\n\n  var modifiedFilter = through.obj(function (file, enc, cb) {\n    // Don't process deleted file who haven't been commited yet.\n    if (file.state === 'modified' || (file.state === 'deleted' && !file.isNew)) {\n      this.push(file);\n    }\n\n    cb();\n  });\n\n  var commitFilter = through.obj(function (file, enc, cb) {\n    store.add(file);\n    if (file.state === 'modified') {\n      write(file);\n    } else if (file.state === 'deleted') {\n      remove(file);\n    }\n\n    delete file.state;\n    delete file.isNew;\n    cb();\n  });\n\n  filters.unshift(modifiedFilter);\n  filters.push(commitFilter);\n\n  var stream = filters.reduce(function (stream, filter) {\n    return stream.pipe(filter);\n  }, this.store.stream());\n\n  stream.on('finish', cb);\n};\n"}